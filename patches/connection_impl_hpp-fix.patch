diff --git vendor/websocketpp/0.8.2/websocketpp/impl/connection_impl.hpp vendor/websocketpp/0.8.2/websocketpp/impl/connection_impl.hpp
index bf88c95..54c7697 100644
--- vendor/websocketpp/0.8.2/websocketpp/impl/connection_impl.hpp
+++ vendor/websocketpp/0.8.2/websocketpp/impl/connection_impl.hpp
@@ -80,28 +80,28 @@ session::state::value connection<config>::get_state() const {
 }
 
 template <typename config>
-lib::error_code connection<config>::send(std::string const & payload,
+lib::error_code connection<config>::send(std::string const & payload, bool reliable,
     frame::opcode::value op)
 {
     message_ptr msg = m_msg_manager->get_message(op,payload.size());
     msg->append_payload(payload);
     msg->set_compressed(true);
 
-    return send(msg);
+    return send(msg, reliable);
 }
 
 template <typename config>
-lib::error_code connection<config>::send(void const * payload, size_t len,
+lib::error_code connection<config>::send(void const * payload, size_t len, bool reliable,
     frame::opcode::value op)
 {
     message_ptr msg = m_msg_manager->get_message(op,len);
     msg->append_payload(payload,len);
 
-    return send(msg);
+    return send(msg, reliable);
 }
 
 template <typename config>
-lib::error_code connection<config>::send(typename config::message_type::ptr msg)
+lib::error_code connection<config>::send(typename config::message_type::ptr msg, bool reliable)
 {
     if (m_alog->static_test(log::alevel::devel)) {
         m_alog->write(log::alevel::devel,"connection send");
@@ -121,7 +121,7 @@ lib::error_code connection<config>::send(typename config::message_type::ptr msg)
         outgoing_msg = msg;
 
         scoped_lock_type lock(m_write_lock);
-        write_push(outgoing_msg);
+        write_push(outgoing_msg, reliable);
         needs_writing = !m_write_flag && !m_send_queue.empty();
     } else {
         outgoing_msg = m_msg_manager->get_message();
@@ -137,7 +137,7 @@ lib::error_code connection<config>::send(typename config::message_type::ptr msg)
             return ec;
         }
 
-        write_push(outgoing_msg);
+        write_push(outgoing_msg, reliable);
         needs_writing = !m_write_flag && !m_send_queue.empty();
     }
 
@@ -206,7 +206,7 @@ void connection<config>::ping(std::string const& payload, lib::error_code& ec) {
     bool needs_writing = false;
     {
         scoped_lock_type lock(m_write_lock);
-        write_push(msg);
+        write_push(msg, true);
         needs_writing = !m_write_flag && !m_send_queue.empty();
     }
 
@@ -277,7 +277,7 @@ void connection<config>::pong(std::string const& payload, lib::error_code& ec) {
     bool needs_writing = false;
     {
         scoped_lock_type lock(m_write_lock);
-        write_push(msg);
+        write_push(msg, true);
         needs_writing = !m_write_flag && !m_send_queue.empty();
     }
 
@@ -1793,6 +1793,7 @@ template <typename config>
 void connection<config>::write_frame() {
     //m_alog->write(log::alevel::devel,"connection write_frame");
 
+    uint64_t total_size = 0;
     {
         scoped_lock_type lock(m_write_lock);
 
@@ -1807,15 +1808,21 @@ void connection<config>::write_frame() {
         // pull off all the messages that are ready to write.
         // stop if we get a message marked terminal
         message_ptr next_message = write_pop();
+
         while (next_message) {
             m_current_msgs.push_back(next_message);
+            total_size += next_message->get_payload().size();
+            if (total_size > 1048576) {
+                // if package size is more than 1MB, send messages.
+                break;
+            }
             if (!next_message->get_terminal()) {
                 next_message = write_pop();
             } else {
                 next_message = message_ptr();
             }
         }
-        
+
         if (m_current_msgs.empty()) {
             // there was nothing to send
             return;
@@ -1835,50 +1842,6 @@ void connection<config>::write_frame() {
         m_send_buffer.push_back(transport::buffer(header.c_str(),header.size()));
         m_send_buffer.push_back(transport::buffer(payload.c_str(),payload.size()));   
     }
-
-    // Print detailed send stats if those log levels are enabled
-    if (m_alog->static_test(log::alevel::frame_header)) {
-    if (m_alog->dynamic_test(log::alevel::frame_header)) {
-        std::stringstream general,header,payload;
-        
-        general << "Dispatching write containing " << m_current_msgs.size()
-                <<" message(s) containing ";
-        header << "Header Bytes: \n";
-        payload << "Payload Bytes: \n";
-        
-        size_t hbytes = 0;
-        size_t pbytes = 0;
-        
-        for (size_t i = 0; i < m_current_msgs.size(); i++) {
-            hbytes += m_current_msgs[i]->get_header().size();
-            pbytes += m_current_msgs[i]->get_payload().size();
-
-            
-            header << "[" << i << "] (" 
-                   << m_current_msgs[i]->get_header().size() << ") " 
-                   << utility::to_hex(m_current_msgs[i]->get_header()) << "\n";
-
-            if (m_alog->static_test(log::alevel::frame_payload)) {
-            if (m_alog->dynamic_test(log::alevel::frame_payload)) {
-                payload << "[" << i << "] (" 
-                        << m_current_msgs[i]->get_payload().size() << ") ["<<m_current_msgs[i]->get_opcode()<<"] "
-                        << (m_current_msgs[i]->get_opcode() == frame::opcode::text ? 
-                                m_current_msgs[i]->get_payload() : 
-                                utility::to_hex(m_current_msgs[i]->get_payload())
-                           ) 
-                        << "\n";
-            }
-            }  
-        }
-        
-        general << hbytes << " header bytes and " << pbytes << " payload bytes";
-        
-        m_alog->write(log::alevel::frame_header,general.str());
-        m_alog->write(log::alevel::frame_header,header.str());
-        m_alog->write(log::alevel::frame_payload,payload.str());
-    }
-    }
-
     transport_con_type::async_write(
         m_send_buffer,
         m_write_frame_handler
@@ -2143,7 +2106,7 @@ lib::error_code connection<config>::send_close_frame(close::status::value code,
     bool needs_writing = false;
     {
         scoped_lock_type lock(m_write_lock);
-        write_push(msg);
+        write_push(msg, true);
         needs_writing = !m_write_flag && !m_send_queue.empty();
     }
 
@@ -2207,19 +2170,24 @@ connection<config>::get_processor(int version) const {
 }
 
 template <typename config>
-void connection<config>::write_push(typename config::message_type::ptr msg)
+void connection<config>::write_push(typename config::message_type::ptr msg, bool reliable)
 {
     if (!msg) {
         return;
     }
 
+    uint64_t now = std::chrono::duration_cast<std::chrono::milliseconds>(
+        std::chrono::system_clock::now().time_since_epoch()).count();
+
     m_send_buffer_size += msg->get_payload().size();
-    m_send_queue.push(msg);
+
+    m_send_queue.push(std::make_tuple(now, msg, reliable));
 
     if (m_alog->static_test(log::alevel::devel)) {
         std::stringstream s;
         s << "write_push: message count: " << m_send_queue.size()
-          << " buffer size: " << m_send_buffer_size;
+          << " buffer size: " << m_send_buffer_size
+          << " timestamp: " << now;
         m_alog->write(log::alevel::devel,s.str());
     }
 }
@@ -2233,16 +2201,24 @@ typename config::message_type::ptr connection<config>::write_pop()
         return msg;
     }
 
-    msg = m_send_queue.front();
+    uint64_t now = std::chrono::duration_cast<std::chrono::milliseconds>(
+        std::chrono::system_clock::now().time_since_epoch()).count();
 
-    m_send_buffer_size -= msg->get_payload().size();
-    m_send_queue.pop();
+    while (!m_send_queue.empty()) {
+        auto message_tuple = m_send_queue.front();
 
-    if (m_alog->static_test(log::alevel::devel)) {
-        std::stringstream s;
-        s << "write_pop: message count: " << m_send_queue.size()
-          << " buffer size: " << m_send_buffer_size;
-        m_alog->write(log::alevel::devel,s.str());
+        uint64_t message_time = std::get<0>(message_tuple);
+        msg = std::get<1>(message_tuple);
+        bool is_reliable = std::get<2>(message_tuple);
+
+        uint64_t time_diff_ms = now - message_time;
+        uint64_t msg_size = msg->get_payload().size();
+        m_send_buffer_size -= msg_size;
+        m_send_queue.pop();
+
+        if (time_diff_ms < 100 || is_reliable) {
+            return msg;
+        }
     }
     return msg;
 }
