name: build deb
on:
  push:
    branches:
      - feat-deb-action
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - ros_distribution: noetic
            arch: amd64
            distro: focal
            label: ubuntu-latest
            container: cobridge/ros-noetic:latest
#          - ros_distribution: noetic
#            arch: arm64
#            distro: focal
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-noetic:latest
#          - ros_distribution: foxy
#            arch: amd64
#            distro: focal
#            label: ubuntu-latest
#            container: cobridge/ros-foxy:latest
#          - ros_distribution: foxy
#            arch: arm64
#            distro: focal
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-foxy:latest
#          - ros_distribution: humble
#            arch: amd64
#            distro: Jammy
#            label: ubuntu-latest
#            container: cobridge/ros-humble:latest
#          - ros_distribution: humble
#            arch: arm64
#            distro: Jammy
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-humble:latest

    name: Build deb (ROS ${{ matrix.ros_distribution }} - ${{ matrix.arch }})

    runs-on: ${{ matrix.label }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: src/cobridge

      - name: Generate debian/ directory and build .deb package
        run: |
          rosdep update --rosdistro=${{ matrix.ros_distribution }}
          cd ./src/cobridge
          bloom-generate rosdebian --ros-distro ${{ matrix.ros_distribution }}
          DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -us -uc -a${{ matrix.arch }}
          ls .. -lah

      - name: Get DEB file name
        run: |
          echo "ARTIFACT_NAME=$(basename $(find ./src -name '*_${{ matrix.arch }}.deb'))" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ros_distribution }} - ${{ matrix.arch }}
          path: ./src/*.deb

      - name: Import gpg key and write apt config
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --import
          cat <<EOF > ./src/cobridge/apt-ftparchive.conf
          APT {
            FTPArchive {
              Release {
                Origin "cobridge";
                Label "cobridge";
                Suite "stable";
                Codename "${{ matrix.distro }}";
                Version "${{ matrix.ros_distribution }}";
              }
            }
          }
          EOF

      - name: Build APT repo
        run: |
          mkdir -p dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}
          cp ./src/${{ env.ARTIFACT_NAME }} ./dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/${{ env.ARTIFACT_NAME }}
          dpkg-scanpackages dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }} /dev/null > dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/Packages          
          gzip -k -f dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/Packages
          apt-ftparchive release dists/${{ matrix.distro }}/stable -c ./src/cobridge/apt-ftparchive.conf > dists/${{ matrix.distro }}/stable/Release
          
          gpg --clearsign -o dists/${{ matrix.distro }}/stable/InRelease dists/${{ matrix.distro }}/stable/Release
          gpg -abs -o dists/${{ matrix.distro }}/stable/Release.gpg dists/${{ matrix.distro }}/stable/Release
          
          cat dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/Packages
          echo "\n----------------------------------\n"
          cat dists/${{ matrix.distro }}/stable/Release
          echo "\n----------------------------------\n"
          cat dists/${{ matrix.distro }}/stable/InRelease

      - name: Upload file to OSS
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
          key-secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            ./dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/${{ env.ARTIFACT_NAME }}:/cobridge/dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/${{ env.ARTIFACT_NAME }}
            ./dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/Packages:/cobridge/dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/Packages
            ./dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/Packages.gz:/cobridge/dists/${{ matrix.distro }}/stable/main/binary-${{ matrix.arch }}/Packages.gz
            ./dists/${{ matrix.distro }}/stable/Release:/cobridge/dists/${{ matrix.distro }}/stable/Release
            ./dists/${{ matrix.distro }}/stable/InRelease:/cobridge/dists/${{ matrix.distro }}/stable/InRelease
            ./dists/${{ matrix.distro }}/stable/Release.gpg:/cobridge/dists/${{ matrix.distro }}/stable/Release.gpg
