name: build deb
on:
  pull_request:
  workflow_dispatch:
  release:

jobs:
  build-deb:
    strategy:
      fail-fast: false
      matrix:
        include:
          - ros_distribution: noetic
            arch: amd64
            distro: focal
            label: ubuntu-latest
            container: coscene/ros:noetic-amd64
          - ros_distribution: noetic
            arch: arm64
            distro: focal
            label: [ linux-arm-64-8c-32g-300gb ]
            container: coscene/ros:noetic-arm64
          - ros_distribution: foxy
            arch: amd64
            distro: focal
            label: ubuntu-latest
            container: coscene/ros:foxy-amd64
          - ros_distribution: foxy
            arch: arm64
            distro: focal
            label: [ linux-arm-64-8c-32g-300gb ]
            container: coscene/ros:foxy-arm64
          - ros_distribution: humble
            arch: amd64
            distro: jammy
            label: ubuntu-latest
            container: coscene/ros:humble-amd64
          - ros_distribution: humble
            arch: arm64
            distro: jammy
            label: [ linux-arm-64-8c-32g-300gb ]
            container: coscene/ros:humble-arm64

    name: Build deb (ROS ${{ matrix.ros_distribution }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.label }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: src/cobridge

      - name: Update package version
        if: github.event_name == 'release'
        run: |
          VERSION=$(echo $GITHUB_REF | sed 's#refs/tags/v##')
          echo "Version: $VERSION"
          echo "GITHUB_REF: $GITHUB_REF"
          sed -i "s#<version>.*</version>#<version>$VERSION</version>#" ./src/cobridge/package.xml

      - name: Generate debian/ directory and build .deb package
        run: |
          rosdep update --rosdistro=${{ matrix.ros_distribution }} --include-eol-distros
          cd ./src/cobridge
          bloom-generate rosdebian --ros-distro ${{ matrix.ros_distribution }}
          DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -us -uc -a${{ matrix.arch }}
          ls .. -lah

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ros_distribution }}-${{ matrix.arch }}
          path: ./src/*.deb

  build-apt-repo:
    strategy:
      fail-fast: false
      matrix:
        distro: [ focal, jammy ]

    name: Build APT Repository
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Generate apt-ftparchive.conf
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --import
          cat <<EOF > ./artifacts/apt-ftparchive.conf
          APT {
            FTPArchive {
              Release {
                Origin "cobridge";
                Label "cobridge";
                Suite "${{ matrix.distro }}";
                Codename "${{ matrix.distro }}";
              }
            }
          }
          EOF
          ls -lah ./artifacts

      - name: Build APT repo
        run: |
          mkdir -p dists/${{ matrix.distro }}/main/binary-amd64
          mkdir -p dists/${{ matrix.distro }}/main/binary-arm64

          find ./artifacts -name "*${{ matrix.distro }}_amd64.deb" -exec cp {} ./dists/${{ matrix.distro }}/main/binary-amd64/ \;
          find ./artifacts -name "*${{ matrix.distro }}_arm64.deb" -exec cp {} ./dists/${{ matrix.distro }}/main/binary-arm64/ \;
          
          dpkg-scanpackages dists/${{ matrix.distro }}/main/binary-amd64 /dev/null > dists/${{ matrix.distro }}/main/binary-amd64/Packages          
          dpkg-scanpackages dists/${{ matrix.distro }}/main/binary-arm64 /dev/null > dists/${{ matrix.distro }}/main/binary-arm64/Packages
          
          gzip -k -f dists/${{ matrix.distro }}/main/binary-amd64/Packages
          gzip -k -f dists/${{ matrix.distro }}/main/binary-arm64/Packages
          
          apt-ftparchive release dists/${{ matrix.distro }} -c ./artifacts/apt-ftparchive.conf > dists/${{ matrix.distro }}/Release
          gpg --clearsign -o dists/${{ matrix.distro }}/InRelease dists/${{ matrix.distro }}/Release
          gpg -abs -o dists/${{ matrix.distro }}/Release.gpg dists/${{ matrix.distro }}/Release

      - name: Upload APT repo to OSS
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
          key-secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            ./dists/**:/cobridge/dists/
