name: build deb
on:
  push:
    branches:
      - feat-deb-action
  workflow_dispatch:

jobs:
  build-deb:
    strategy:
      fail-fast: false
      matrix:
        include:
          - ros_distribution: noetic
            arch: amd64
            distro: focal
            label: ubuntu-latest
            container: cobridge/ros-noetic:latest
#          - ros_distribution: noetic
#            arch: arm64
#            distro: focal
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-noetic:latest
          - ros_distribution: foxy
            arch: amd64
            distro: focal
            label: ubuntu-latest
            container: cobridge/ros-foxy:latest
#          - ros_distribution: foxy
#            arch: arm64
#            distro: focal
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-foxy:latest
#          - ros_distribution: humble
#            arch: amd64
#            distro: jammy
#            label: ubuntu-latest
#            container: cobridge/ros-humble:latest#
#         - ros_distribution: humble
#            arch: arm64
#            distro: Jammy
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-humble:latest

    name: Build deb (ROS ${{ matrix.ros_distribution }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.label }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: src/cobridge

      - name: Generate debian/ directory and build .deb package
        run: |
          rosdep update --rosdistro=${{ matrix.ros_distribution }}
          cd ./src/cobridge
          bloom-generate rosdebian --ros-distro ${{ matrix.ros_distribution }}
          DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -us -uc -a${{ matrix.arch }}
          ls .. -lah

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ros_distribution }}-${{ matrix.arch }}
          path: ./src/*.deb

  build-apt-repo:
    strategy:
      fail-fast: false
      matrix:
        distro: [ focal, jammy ]

    name: Build APT Repository
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Generate apt-ftparchive.conf
        run: |
          cat <<EOF > ./artifacts/apt-ftparchive.conf
          APT {
            FTPArchive {
              Release {
                Origin "cobridge";
                Label "cobridge";
                Suite "stable";
                Codename "${{ matrix.distro }}";
              }
            }
          }
          EOF
          ls -lah ./artifacts

      - name: Build APT repo
        run: |
          /cobridge/dists/stable/main/binary-${{ matrix.arch }}/${{ env.ARTIFACT_NAME }}
          mkdir -p dists/${{ matrix.distro }}/main/binary-amd64
          mkdir -p dists/${{ matrix.distro }}/main/binary-arm64

#         ros-foxy-cobridge_25.1.0-0focal_amd64.deb
#         ros-noetic-cobridge_25.1.0-0focal_amd64.deb
          find ./artifacts -name "*-${{ matrix.distro }}_amd64.deb" -exec cp {} ./dists/${{ matrix.distro }}/main/binary-amd64/ \;
          find ./artifacts -name "*-${{ matrix.distro }}_arm64.deb" -exec cp {} ./dists/${{ matrix.distro }}/main/binary-arm64/ \;
               
          dpkg-scanpackages dists/${{ matrix.distro }}/main/binary-amd64 /dev/null > dists/${{ matrix.distro }}/main/binary-amd64/Packages
          gzip -k -f dists/${{ matrix.distro }}/main/binary-amd64/Packages
          apt-ftparchive release dists/${{ matrix.distro }} -c ./artifacts/apt-ftparchive.conf > dists/${{ matrix.distro }}/Release
          gpg --clearsign -o dists/${{ matrix.distro }}/InRelease dists/${{ matrix.distro }}/Release
          gpg -abs -o dists/${{ matrix.distro }}/Release.gpg dists/${{ matrix.distro }}/Release

      - name: Upload APT repo to OSS
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
          key-secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            ./dists/**:/cobridge/dists/


#
#      - name: Build APT repo
#        run: |
#          mkdir -p dists/focal/main/binary-amd64
#          mkdir -p dists/jammy/main/binary-amd64
#
#          # Move .deb files into appropriate directories
#          find ./deb-files -name "*.deb" -exec cp {} ./dists/focal/main/binary-amd64/ \;
#          find ./deb-files -name "*.deb" -exec cp {} ./dists/jammy/main/binary-amd64/ \;
#
#          # Generate Packages and Release files for focal
#          dpkg-scanpackages dists/focal/main/binary-amd64 /dev/null > dists/focal/main/binary-amd64/Packages
#          gzip -k -f dists/focal/main/binary-amd64/Packages
#          apt-ftparchive release dists/focal -c ./deb-files/apt-ftparchive.conf > dists/focal/Release
#
#          # Generate Packages and Release files for jammy
#          dpkg-scanpackages dists/jammy/main/binary-amd64 /dev/null > dists/jammy/main/binary-amd64/Packages
#          gzip -k -f dists/jammy/main/binary-amd64/Packages
#          apt-ftparchive release dists/jammy -c ./deb-files/apt-ftparchive.conf > dists/jammy/Release
#
#          # Sign both releases
#          gpg --clearsign -o dists/focal/InRelease dists/focal/Release
#          gpg -abs -o dists/focal/Release.gpg dists/focal/Release
#          gpg --clearsign -o dists/jammy/InRelease dists/jammy/Release
#          gpg -abs -o dists/jammy/Release.gpg dists/jammy/Release
#
#      - name: Upload APT repo to OSS
#        uses: tvrcgo/oss-action@master
#        with:
#          key-id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
#          key-secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
#          region: oss-cn-hangzhou
#          bucket: coscene-download
#          assets: |
#            ./dists/focal/main/binary-amd64/Packages:/cobridge/dists/focal/main/binary-amd64/Packages
#            ./dists/focal/main/binary-amd64/Packages.gz:/cobridge/dists/focal/main/binary-amd64/Packages.gz
#            ./dists/focal/Release:/cobridge/dists/focal/Release
#            ./dists/focal/InRelease:/cobridge/dists/focal/InRelease
#            ./dists/focal/Release.gpg:/cobridge/dists/focal/Release.gpg
#            ./dists/jammy/main/binary-amd64/Packages:/cobridge/dists/jammy/main/binary-amd64/Packages
#            ./dists/jammy/main/binary-amd64/Packages.gz:/cobridge/dists/jammy/main/binary-amd64/Packages.gz
#            ./dists/jammy/Release:/cobridge/dists/jammy/Release
#            ./dists/jammy/InRelease:/cobridge/dists/jammy/InRelease
#            ./dists/jammy/Release.gpg:/cobridge/dists/jammy/Release.gpg
