name: build deb
on:
  push:
    branches:
      - feat-deb-action
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - ros_distribution: noetic
            arch: amd64
            label: ubuntu-latest
            container: cobridge/ros-noetic:latest
#          - ros_distribution: noetic
#            arch: arm64
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-noetic:latest
#          - ros_distribution: foxy
#            arch: amd64
#            label: ubuntu-latest
#            container: cobridge/ros-foxy:latest
#          - ros_distribution: foxy
#            arch: arm64
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-foxy:latest
#          - ros_distribution: humble
#            arch: amd64
#            label: ubuntu-latest
#            container: cobridge/ros-humble:latest
#          - ros_distribution: humble
#            arch: arm64
#            label: [ linux-arm-64-8c-32g-300gb ]
#            container: cobridge/ros-humble:latest

    name: Build deb (ROS ${{ matrix.ros_distribution }} - ${{ matrix.arch }})

    runs-on: ${{ matrix.label }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: src/cobridge

      - name: Generate debian/ directory and build .deb package
        run: |
          rosdep update --include-eol-distros
          cd ./src/cobridge
          bloom-generate rosdebian --ros-distro ${{ matrix.ros_distribution }}
          DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -us -uc -a${{ matrix.arch }}
          ls .. -lah

      - name: Get DEB file name
        run: |
          echo "ARTIFACT_NAME=$(basename $(find ./src -name '*_${{ matrix.arch }}.deb'))" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ros_distribution }} - ${{ matrix.arch }}
          path: ./src/*.deb

      - name: Generate GPG Key
        run: |
          cat >key.conf <<EOF
          %echo Generating a GPG key
          Key-Type: RSA
          Key-Length: 2048
          Name-Real: CoScene
          Name-Email: coscene@coscene.io
          Expire-Date: 0
          %no-protection
          %commit
          %echo Done
          EOF

          gpg --batch --gen-key key.conf
          gpg --armor --export coscene@coscene.io > cobridge.gpg-key.asc
          ls -alh

      - name: Build APT repo
        run: |
          mkdir ./apt
          cp ./src/${{ env.ARTIFACT_NAME }} ./apt/${{ env.ARTIFACT_NAME }}
          cp cobridge.gpg-key.asc ./apt/cobridge.gpg-key.asc     
          cd ./apt
          dpkg-scanpackages -m . > Packages
          apt-ftparchive release . > Release
          gpg --armor --detach-sign --sign -o Release.gpg Release
          gpg --clearsign -o InRelease Release     
          ls -alh

      - name: Upload file to OSS
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_ARTIFACTS_ACCESS_KEY }}
          key-secret: ${{ secrets.OSS_ARTIFACTS_ACCESS_SECRET }}
          region: oss-cn-hangzhou
          bucket: coscene-download
          assets: |
            ./apt/${{ env.ARTIFACT_NAME }}:/coBridge/deb/${{ matrix.arch }}/${{ matrix.ros_distribution }}/${{ env.ARTIFACT_NAME }}
            ./apt/${{ env.ARTIFACT_NAME }}:/coBridge/apt/${{ matrix.arch }}/${{ matrix.ros_distribution }}/${{ env.ARTIFACT_NAME }}
            ./apt/Packages:/coBridge/apt/${{ matrix.arch }}/${{ matrix.ros_distribution }}/Packages
            ./apt/Release:/coBridge/apt/${{ matrix.arch }}/${{ matrix.ros_distribution }}/Release
            ./apt/Release.gpg:/coBridge/apt/${{ matrix.arch }}/${{ matrix.ros_distribution }}/Release.gpg
            ./apt/InRelease:/coBridge/apt/${{ matrix.arch }}/${{ matrix.ros_distribution }}/InRelease
            ./apt/cobridge.gpg-key.asc:/coBridge/apt/${{ matrix.arch }}/${{ matrix.ros_distribution }}/cobridge.gpg-key.asc
