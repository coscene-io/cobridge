# Uncrustify Configuration for CoBridge
# This configuration ensures consistent code formatting across all ROS 2 distributions

# General options
newlines                                 = lf        # LINE FEED for line endings
input_tab_size                           = 8         # original tab size
output_tab_size                          = 2         # new tab size
string_escape_char                       = 92        # the value of the backslash character

# Indentation
indent_columns                           = 2         # Number of spaces per indent level
indent_with_tabs                         = 0         # Do not use tabs for indentation
indent_class                             = true      # Indent class bodies
indent_func_call_param                   = false     # Allow flexible function call parameter indent
indent_func_def_param                    = false     # Allow flexible function definition parameter indent
indent_func_param_double                 = false     # Don't double indent for function parameters
indent_func_proto_param                  = false     # Allow flexible function prototype parameter indent
indent_func_class_param                  = false     # Allow flexible class function parameter indent
indent_func_ctor_var_param               = false     # Allow flexible constructor parameter indent
indent_template_param                    = false     # Allow flexible template parameter indent
indent_brace                             = 0         # Brace indent
indent_namespace                         = false     # Do not indent namespaces
indent_namespace_inner_only              = false     # Only indent inner namespace blocks
indent_switch_case                       = 2         # Indent switch case
indent_case_shift                        = 0         # Additional indent for case block
indent_align_string                      = false     # Don't align strings

# Spacing
sp_arith                                 = force     # Space around arithmetic operators
sp_assign                                = force     # Space around assignment operators  
sp_bool                                  = force     # Space around boolean operators
sp_compare                               = force     # Space around comparison operators
sp_before_ptr_star                       = force     # Space before pointer star
sp_after_ptr_star                        = remove    # No space after pointer star
sp_between_ptr_star                      = remove    # No space between pointer stars
sp_before_unnamed_ptr_star               = ignore    # Space before unnamed pointer star
sp_before_ptr_star_func                  = force     # Space before pointer star in function
sp_before_byref                          = force     # Space before reference
sp_after_byref                           = remove    # No space after reference
sp_before_unnamed_byref                  = ignore    # Space before unnamed reference
sp_after_type                            = force     # Space after type
sp_template_angle                        = force     # Space in template angle brackets
sp_before_angle                          = remove    # No space before angle bracket
sp_inside_angle                          = remove    # No space inside angle brackets
sp_after_angle                           = force     # Space after angle bracket
sp_angle_paren                           = remove    # No space between angle bracket and paren
sp_angle_word                            = force     # Space between angle bracket and word
sp_before_sparen                         = force     # Space before statement paren (if, while, etc)
sp_inside_sparen                         = remove    # No space inside statement paren
sp_after_sparen                          = force     # Space after statement paren
sp_sparen_brace                          = force     # Space between statement paren and brace
sp_before_semi                           = remove    # No space before semicolon
sp_before_square                         = remove    # No space before square bracket
sp_inside_square                         = remove    # No space inside square brackets
sp_inside_paren                          = remove    # No space inside parentheses
sp_paren_paren                           = remove    # No space between nested parentheses
sp_cparen_oparen                         = remove    # No space between close and open paren
sp_before_comma                          = remove    # No space before comma
sp_after_comma                           = force     # Space after comma
sp_after_cast                            = remove    # No space after cast
sp_inside_paren_cast                     = remove    # No space inside cast parentheses
sp_sizeof_paren                          = remove    # No space between sizeof and paren
sp_before_byref_func                     = force     # Space before reference in function
sp_after_byref_func                      = remove    # No space after reference in function
sp_func_call_paren                       = remove    # No space between function name and paren
sp_func_proto_paren                      = remove    # No space between function prototype and paren
sp_func_def_paren                        = remove    # No space between function definition and paren
sp_inside_fparens                        = remove    # No space inside function parens
sp_inside_fparen                         = remove    # No space inside function paren
sp_fparen_brace                          = force     # Space between function paren and brace
sp_return_paren                          = force     # Space between return and paren
sp_brace_brace                           = force     # Space between braces
sp_else_brace                            = force     # Space between else and brace
sp_brace_else                            = force     # Space between brace and else
sp_catch_brace                           = force     # Space between catch and brace
sp_brace_catch                           = force     # Space between brace and catch

# Code alignment
align_var_def_star_style                 = 1         # Align pointer stars to the left
align_var_def_amp_style                  = 1         # Align reference ampersands to the left
align_func_params                        = false     # Don't align function parameters
align_same_func_call_params              = false     # Don't align same function call parameters
align_keep_tabs                          = false     # Don't keep tabs for alignment
align_with_tabs                          = false     # Don't use tabs for alignment
align_on_tabstop                         = false     # Don't align on tab stops

# Line continuations and splitting
ls_for_split_full                        = true      # Split for statements at full expressions
ls_func_split_full                       = true      # Split function at full expressions
nl_start_of_file                         = remove    # Remove newline at start of file
nl_end_of_file                           = force     # Force newline at end of file
nl_max                                   = 2         # Maximum consecutive newlines
nl_before_block_comment                  = 2         # Newlines before block comment
nl_after_func_proto                      = 0         # No newlines after function prototype
nl_after_func_proto_group                = 2         # Newlines after function prototype group
nl_after_func_body                       = 2         # Newlines after function body
nl_func_var_def_blk                      = 1         # Newline between function and variable definitions
nl_before_if                             = ignore    # Newline before if
nl_after_if                              = ignore    # Newline after if
nl_before_for                            = ignore    # Newline before for
nl_after_for                             = ignore    # Newline after for
nl_before_while                          = ignore    # Newline before while
nl_after_while                           = ignore    # Newline after while
nl_after_return                          = true      # Newline after return
nl_fdef_brace                            = force     # Newline between function definition and brace
nl_enum_brace                            = force     # Newline between enum and brace
nl_struct_brace                          = force     # Newline between struct and brace
nl_union_brace                           = force     # Newline between union and brace
nl_if_brace                              = force     # Newline between if and brace
nl_brace_else                            = force     # Newline between brace and else
nl_elseif_brace                          = force     # Newline between elseif and brace
nl_else_brace                            = force     # Newline between else and brace
nl_else_if                               = remove    # Remove newline between else and if (else if)
nl_for_brace                             = force     # Newline between for and brace
nl_while_brace                           = force     # Newline between while and brace
nl_do_brace                              = force     # Newline between do and brace
nl_brace_while                           = force     # Newline between brace and while (do...while)
nl_switch_brace                          = force     # Newline between switch and brace
nl_fcall_brace                           = force     # Newline between function call and brace
nl_func_type_name                        = ignore    # Newline between function return type and name
nl_func_proto_type_name                  = ignore    # Newline between function prototype return type and name
nl_func_paren                            = remove    # Remove newline between function and paren
nl_func_decl_start                       = ignore    # Newline at function declaration start
nl_func_decl_end                         = ignore    # Newline at function declaration end
nl_func_decl_args                        = ignore    # Newline in function declaration arguments
nl_func_decl_empty                       = remove    # Remove newline in empty function declaration
nl_class_brace                           = force     # Newline between class and brace
nl_namespace_brace                       = ignore    # Newline between namespace and brace
nl_template_class                        = ignore    # Newline between template and class
nl_squeeze_ifdef                         = false     # Don't squeeze ifdef
nl_squeeze_ifdef_top_level               = false     # Don't squeeze top-level ifdef

# Continuation indentation - this is key for the errors we're seeing
# Set to 0 to allow more flexible continuation indentation (jazzy/rolling style)
indent_continue_class_head               = 0         # Allow flexible indent continuation of class head
indent_single_after_return               = false     # Don't indent single statement after return
indent_paren_close                       = 0         # Don't indent closing paren
indent_paren_after_func_def              = false     # Don't indent paren after function definition
indent_paren_after_func_decl             = false     # Don't indent paren after function declaration
indent_paren_after_func_call             = false     # Don't indent paren after function call

# Allow flexible indentation for lambda parameters and continuations
use_indent_continue_only_once            = false     # Allow multiple levels of continuation indent
indent_continue                          = 0         # Disable strict continuation indent (allows current code)
indent_func_call_param_align             = false     # Don't force alignment of function call params
indent_func_def_param_align              = false     # Don't force alignment of function def params
indent_func_param_align                  = false     # Don't force alignment of function params

# Special cases
cmt_width                                = 0         # Comment width (0 = no limit)
cmt_star_cont                            = true      # Continue block comments with *
eat_blanks_after_open_brace              = true      # Remove blank lines after opening brace
eat_blanks_before_close_brace            = true      # Remove blank lines before closing brace
mod_full_brace_if                        = ignore    # Don't force braces on if statements
mod_full_brace_for                       = ignore    # Don't force braces on for statements
mod_full_brace_while                     = ignore    # Don't force braces on while statements
mod_full_brace_do                        = ignore    # Don't force braces on do statements
mod_paren_on_return                      = ignore    # Don't force parens on return

# Additional permissive settings to accept jazzy/rolling style
pos_arith                                = ignore    # Allow any position for arithmetic operators
pos_assign                               = ignore    # Allow any position for assignment operators
pos_bool                                 = ignore    # Allow any position for boolean operators
pos_compare                              = ignore    # Allow any position for comparison operators
pos_conditional                          = ignore    # Allow any position for conditional operators
pos_comma                                = ignore    # Allow any position for commas
pos_class_comma                          = ignore    # Allow any position for class commas
pos_class_colon                          = ignore    # Allow any position for class colons
nl_func_call_args_multi_line             = false    # Don't force newlines in multi-line function calls
nl_func_decl_args_multi_line             = false    # Don't force newlines in multi-line function declarations
nl_func_def_args_multi_line              = false    # Don't force newlines in multi-line function definitions
code_width                               = 0         # No code width limit (allows long lines)

